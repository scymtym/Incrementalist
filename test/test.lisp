(cl:in-package #:incrementalist.test)

(in-suite :incrementalist)

(test smoke
  "Initial smoke test for the incrementalist system."
  (let ((parse-result (parse-result "foo::bar")))
    (is (= 1 (length parse-result)))
    (let ((first (elt parse-result 0)))
      (is (typep first 'inc::atom-wad))
      (is (typep (cst:raw first) 'inc::non-existing-package-symbol-token))))

  (let ((parse-result (parse-result "'(1 2 3)")))
    (is (= 1 (length parse-result)))
    (is (typep (elt parse-result 0) 'inc::cons-wad)))

  (let ((parse-result (parse-result "'(#1=1 #1# 3)")))
    (is (= 1 (length parse-result)))
    (let ((first (elt parse-result 0)))
      (is (typep first 'inc::cons-wad))
      (let ((children (inc:children first)))
        (is (= 1 (length children)))
        (let ((first (elt children 0)))
          (is (typep first 'inc::cons-wad))
          (let ((children (inc:children first)))
            (is (= 3 (length children)))
            (let ((first (elt children 0)))
              (is (typep first 'inc::labeled-object-definition-wad))
              (let ((raw (cst:raw first)))
                (is (typep raw 'inc:numeric-token))
                (is (eql 1 (inc::value raw)))))
            (let ((second (elt children 1)))
              (is (typep second 'inc::labeled-object-reference-wad))
              (let ((raw (cst:raw second)))
                (is (typep raw 'inc:numeric-token))
                (is (eql 1 (inc::value raw)))))
            (let ((third (elt children 2)))
              (is (typep third 'inc::atom-wad))
              (let ((raw (cst:raw third)))
                (is (typep raw 'inc:numeric-token))
                (is (eql 3 (inc::value raw)))))))))))

(test errors
  "Tests for errors."
  (let ((parse-result (parse-result "#\\does-not-exist")))
    (is (= 1 (length parse-result)))
    (let* ((first  (elt parse-result 0))
           (errors (inc::errors first)))
      (is (typep first 'inc::atom-wad))
      (is (= 1 (length errors)))
      (let* ((error     (elt errors 0))
             (condition (inc::condition* error)))
        (is (typep error 'inc::error-wad))
        (is (= 0 (inc:absolute-start-line-number error)))
        (is (= 2 (inc:start-column error)))
        (is (= 0 (inc:height error)))
        (is (= 16 (inc:end-column error)))
        (is (typep condition 'eclector.reader:unknown-character-name)))))

  (let ((parse-result (parse-result "#b00200")))
    (is (= 1 (length parse-result)))
    (let* ((first  (elt parse-result 0))
           (errors (inc::errors first)))
      (is (typep first 'inc::atom-wad))
      (is (= 1 (length errors)))
      (let* ((error     (elt errors 0))
             (condition (inc::condition* error)))
        (is (typep error 'inc::error-wad))
        (is (= 0 (inc:absolute-start-line-number error)))
        (is (= 4 (inc:start-column error)))
        (is (= 0 (inc:height error)))
        (is (= 5 (inc:end-column error)))
        (is (typep condition 'eclector.reader:digit-expected))))))
